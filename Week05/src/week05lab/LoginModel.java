/*
 * Model: All the code related to the business logic of the company where the logic lays 
 * The logic for now is to validate the userInfo, which is an instance of User,
 * comparing with user_info, a table of a database in sql databases 
 */
package week05lab;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

public class LoginModel {
    
    //boolean method having an instace of User userInfo as a parameter
    public boolean modelManager(User userInfo) {
        
        //a local-level boolean vriable set to false since nothing has been validated
        boolean isValidUser = false;  
        
        try {   //need try-catch since the external sql is.
            //.forName() Returns the {@code Class} object associated with the class or interface with the given string name, using the given class loader.
            //.newInstance() creates a new instance of the class represented by this {@code Class} object
            Class.forName("com.mysql.jdbc.Driver").newInstance();   
            
            /* SSL-related dead code. As I am not using any SSL, skip warning lines while running the program.
            * ?hibernatedb?autoReconnect=true&amp;useSSL=false";     
            * ?hibernatedb?autoReconnect=true&amp;useSSL=false
            * ?verifyServerCertificate=false&useSSL=true */
            //String dbServer = "jdbc:mysql://127.0.0.1:3306 //BTW, this works as well
            String dbServer = //dbServer that spepcifies a specific database in databases in sql
            "jdbc:mysql://localhost:3306/week05_gui?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=GMT";
            String user = "root";   //ID
            String password = "hh20622";   //password
            
            /**
             * sql query goes here;
             * the userInfo passed retrieves each of running user name and password by using each of  a getter    */
            String query = "SELECT * FROM user_info where UserName ='" + userInfo.getName() + "' AND password ='" + userInfo.getPwd()  + "';";
            
            /*
            * .getConnection() attempts to establish a connection to the given database URL.
            * @param url a database url of the form
            * @param password the user's password
            * @return a connection to the URL */
            Connection conn = DriverManager.getConnection(dbServer, user, password);    //get a connection to the DB
            
            /*
            * Statement class: the object used for executing a static SQL statement and returning the results it produces
            * createStatement(): creates a <code>Statement</code> object for sending SQL statements to the database.  */
            Statement stmt = conn.createStatement();    //get a statement from the connection
            
            /** interface ResultSet 
            * A table of data representing a database result set, which is usually generated by executing a statement that queries the database.
            * <P>A <code>ResultSet</code> object  maintains a cursor pointing to its current row of data.
            * Initially the cursor is positioned before the first row.
            * The <code>next</code> method moves the cursor to the next row,
            * and because it returns <code>false</code> when there are no more rows in the <code>ResultSet</code> object,
            * it can be used in a <code>while</code> loop to iterate through the result set. */
            ResultSet rs = stmt.executeQuery(query);    //Execute the query
            
            /** not in use
             * String[][] data = new String[3][3];
               int row = 0;
               
               //loop through the result set
               while(rs.next()) {
                
                data[row][0] =  rs.getString("id");
                data[row][1] =  rs.getString("first_name");
                data[row][2] =  rs.getString("last_name");
                row++;      
                }
             */
            
            /****************************   
             * if(rs.next()) {          *
             *   isValidUser = true;    *
             * }                        *
             ***************************/   
            //the above code works but it can be simplified as follow unless the value of line by line should be taken into account in particular.
            isValidUser = rs.next();    //once a row in sql == the value of userInfo passed, return true.
            
            
            //close the result set, statement and the connection
            rs.close();
            stmt.close();
            conn.close();
        }catch(SQLException se) {
            //SQLException: An exception that provides information on a database access error or other errors.
            System.out.println("SQLException se:");
            
            //loop through the SQLException
            while(se != null) {
                System.out.println("se.getSQLState(): " + se.getSQLState());    //retrieves the SQLState for this <code>SQLException</code> object.
                System.out.println("se.getMessage(): " + se.getMessage());  //returns  the detail message string of this {@code Throwable} instance(which may be {@code null}).
                System.out.println("se.getErrorCode(): " + se.getErrorCode());  //retrieves the vendor-specific exception code for this <code>SQLException</code> object.
                se = se.getNextException(); //returns the next <code>SQLException</code> object in the chain; <code>null</code> if there are none
            }          
        }catch (Exception e) {
        /*the class {@code Exception} and its subclasses are a form of
         * {@code Throwable} that indicates conditions that a reasonable
         * application might want to catch. */
            System.out.println(e);
    }
        
        return isValidUser; //return the boolean variable
}
