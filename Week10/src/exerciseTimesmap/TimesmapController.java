package exerciseTimesmap;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

/**
 *
 * @author Q
 */
public class TimesmapController implements ActionListener, ListSelectionListener {
    
    private TimesmapView tView; //declare an instance of the view
    private TimesmapModel tModel;   //declare an instance of the model
    private String[] epoch = null;  //the array to store unix based time
    private String[] epochToCT_type=null;   ////the array to store current time converted from unix based time

    //default contstructor
    public TimesmapController() {

    
        tModel = new TimesmapModel();   //initialize the instance of the model
        tModel.dbConnector();   //connect to DB
        this.epoch = tModel.epochRetriever();   //retrive the unix time from DB
        
        tView = new TimesmapView(this); //initialize the instance of the view passing this class as a ref
        tView.attributeManager();   //inital view setting
        tView.components();  //components to be shown
        tView.validations(); //validate
        
    }
    
    public String[] getEpoch() {
        //getter to be used in the other classes
        return this.epoch;
    }
    
    
    //ListSelectionListener for JList
    @Override
    public void valueChanged(ListSelectionEvent e) {
        
        //convert the selected cell at JList instance in the view class into string, (I don't know why it returns twice, though.)
        String t = this.tView.getTimeList().getSelectedValue().toString();
        System.out.println("to string: " + t);
        
        //convert the plain string to a current based time format using the method selectedListToCT(string) at the model class
        epochToCT_type = tModel.selectedListToCT(t);
        
        //once any other cell at JList is selected, unselect the JCheckBox to refresh.
        tView.chin01.setSelected(false);

    }

    //ActionListener for JCheckBox
    @Override
    public void actionPerformed(ActionEvent e) {
        
        //e == "acToCT"
        if(e.getActionCommand().equals("acToCT")) {

            /* get the crrent time converted from the unix time format.
             * using the getter getEpochToCT_type().
             * 
             * getEpochToCT_type() is generated by the method selectedListToCT(string) at the model class
             * rooting for the overridden method valueChanged(ListSelectionEvent e), ListSelectionListener for JList */
            String[] converted = this.getEpochToCT_type();
            
            int i=0;  //row counter                  
            
            
            //the init value at 0, 0 in the table == "Click the options above"
            if(tView.dtm.getValueAt(0, 0).toString().equals("Click the options above")) {
            
                System.out.println("tView.dtm.getValueAt(0, 0).toString(): " + tView.dtm.getValueAt(0, 0).toString());
                tView.dtm.removeRow(0); //remove that
                tView.dtm.insertRow(0, converted);  //insert the new crrent time converted.

            }else {
                
                //the existing index 0 means (i = tView.dtm.getRowCount()) is quqals to 1
                //thus the next index insertion is at index 1 which is at index i
                if((i = tView.dtm.getRowCount()) <= 9) {
                    
                    /* you've already known that a row at 0 index exists.
                     * if ((i = tView.dtm.getRowCount()) <= 9, 10 rows are filled and are existing. */    
                    System.out.println("counter i at else statement: " + i);
                    tView.dtm.insertRow(i, converted);
                    
                }else {
                    
                    //here, i == 10
                    System.out.println("no insertion allowed");
                    System.out.println("counter i at else statement: " + i);
                    
                    //the last index is at 9 so j=i-1
                    for(int j=i-1; j>=0; j--) {
                        
                        tView.dtm.removeRow(j); //remove all the rows existing
                    }
                    
                    //reset the table
                    String[] backToInit = {"Click the options above"};
                    tView.dtm.insertRow(0, backToInit); //insert it
                    System.out.println("insertion setting has just been re-initialized");
                    
                }
                
            }

        }
    }

    //getter that returns the current time converted from an unix time
    public String[] getEpochToCT_type() {
        return this.epochToCT_type;
    }
}

