package connectionToDB;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

public class ConnectionToDB {
    
    public ConnectionToDB() {
        
        try {   //need try-catch since the external sql is.
            //.forName() Returns the {@code Class} object associated with the class or interface with the given string name, using the given class loader.
            //.newInstance() creates a new instance of the class represented by this {@code Class} object
            Class.forName("com.mysql.jdbc.Driver").newInstance();   
            
            /* SSL-related dead code
            * ?hibernatedb?autoReconnect=true&amp;useSSL=false";     
            * ?hibernatedb?autoReconnect=true&amp;useSSL=false
            * ?verifyServerCertificate=false&useSSL=true */
            //String dbServer = "jdbc:mysql://127.0.0.1:3306 //this works as well
            String dbServer = "jdbc:mysql://localhost:3306/books?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=GMT";
            String user = "root";   //ID
            String password = "hh20622";   //password
            String query = "SELECT * FROM title_authors";    //sql quesry 
            
            /*
            * .getConnection() attempts to establish a connection to the given database URL.
            * @param url a database url of the form
            * @param password the user's password
            * @return a connection to the URL */
            Connection conn = DriverManager.getConnection(dbServer, user, password);    //get a connection to the DB
            
            /*
            * Statement class: the object used for executing a static SQL statement and returning the results it produces
            * createStatement(): creates a <code>Statement</code> object for sending SQL statements to the database.  */
            Statement stmt = conn.createStatement();    //get a statement from the connection
            
            /** interface ResultSet 
            * A table of data representing a database result set, which is usually generated by executing a statement that queries the database.
            * <P>A <code>ResultSet</code> object  maintains a cursor pointing to its current row of data.
            * Initially the cursor is positioned before the first row.
            * The <code>next</code> method moves the cursor to the next row,
            * and because it returns <code>false</code> when there are no more rows in the <code>ResultSet</code> object,
            * it can be used in a <code>while</code> loop to iterate through the result set. */
            ResultSet rs = stmt.executeQuery(query);    //Execute the query
            
            //loop through the result set
            while(rs.next()) {
                //.getString(String columnLabel) throws SQLException; returns the resulting set(field value) of a column label specified
                System.out.println(rs.getString("title_id") + "\t" //value of col + tab
                        + rs.getString("au_id") + "\t" 
                        + rs.getString("au_order") + "\t" 
                        + rs.getString("royalty_share")); 
            }
            
            //close the result set, statement and the connection
            rs.close();
            stmt.close();
            conn.close();
        }catch(SQLException se) {
            //SQLException: An exception that provides information on a database access error or other errors.
            System.out.println("SQLException se:");
            
            //loop through the SQLException
            while(se != null) {
                System.out.println("se.getSQLState(): " + se.getSQLState());    //retrieves the SQLState for this <code>SQLException</code> object.
                System.out.println("se.getMessage(): " + se.getMessage());  //returns  the detail message string of this {@code Throwable} instance(which may be {@code null}).
                System.out.println("se.getErrorCode(): " + se.getErrorCode());  //retrieves the vendor-specific exception code for this <code>SQLException</code> object.
                se = se.getNextException(); //returns the next <code>SQLException</code> object in the chain; <code>null</code> if there are none
            }          
        }catch (Exception e) {
        /*the class {@code Exception} and its subclasses are a form of
         * {@code Throwable} that indicates conditions that a reasonable
         * application might want to catch. */
            System.out.println(e);
        }
    }

    public static void main(String[] args) {
        //invoke constructor
        new ConnectionToDB();
    }
}
